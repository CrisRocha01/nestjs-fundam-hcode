 - framework back-end que usa o node;
 - usa o typescript;
 - usa o padrão do angular: organização;
 - criar aplicação web, api, micro serviço: facilita a manutenção;

* arquitetura cliente-servidor

* criar projeto nest
- ter node 12 ou >;
- instalar pacote cli:
	- nest i -g nestjs/cli + nest new project-name
	ou
	- npx @nestjs/cli new project-name; (não faz a instalação global)

*instrutura de pasta do nest
 - package.json: pacote de dependências/aplicações node;
 - nest-cli-json: cli do nest;
 - scr:
	 - main: boostrap da aplicação: configura a porta usada;
	 - app.service: importa os services e os services;
	 - app.controller.scec.ts: arquivo de teste jest

* Metodos de request:
* Ciclo de vida no nest:
 - Os controller recebe todos os requests e trata conforme metodo (define uma rota);
	- Requist
	- validação
	- modificação/tratamentos
	- Response

*Boostrap no nest:
 - Inicia a aplicação: é uma funçao async responsável por criar a aplicação nest e recebe como parametro o module inicial da aplicação;

* @Decorators:
 - Recurso do typescript;
 - Modifica um elemento em tempo de execução;

*module:
 - divide a aplicação em modulos cujos recursos pode ser exportados e importados
 - agrupa recursos como serviços(providers) e controles;
ex: modulo de serviço de upload; usuários, produtos
 -  exportável exports: [AppService]
 - é possível importar outros módulos nos módulos


*Controllers:
 - Recebe os requests do client-side;
 - responsável por receber os métodos e as rotas dos requests;
 - faz a distribuição;
 - recebe os requests e direciona para uma rota
 - não é boa prática fazer solicitações(ex: BD) ou resoluções(tratamentos) no controller;
 - @Controller(<recebe a rota: string>)ex: '/';
 - "Caixa agrupadora";
 

*Services(providers):
 - Processa as regras;
 - faz solicitações no BD;
 - usa o @Injectable() -> injeta a classe em outras classes;

* CRUD:
 - API: Interface para aplicação: parte visivel para o uso/acesso para outra aplicações;
 - REST: convenção de regras para criação de uma API WEB.
 - CRUD: Criar(post), Read(get), Update(put(tudo)/patch(parcial)), Delete(delete)

* DTO: Objeto de transferência de dados
 - Padrão de projeto usado para tranferir dados em aplicações de um ambiente para outro;
 - Permite formatação e validação dos dados;
 - ex: Retira dados do BD e coloca em uma estrutura padrão;
 - ex: recebe os dados de um request e coloca em uma estrutura padrão;
 - facilita a validação e/ou tranformação dos dados
 + biblioteca para validação: class-validator
 + biblioteca para transformação: class-transformer


 - instalação através do winget (servidor windows):
 - baixar no windows terminal (loja windows);
 - no powershell digitar winget search nvm;
 - baixar primeira ocorrência:
CoreyButler.NVMforWindows

baixar versão do node:
nvm install <nr versão>
---------------------------------------------
Instalação do nest
 - global: npm i -h @nestjs/cli
	projeto:
	nest new <nome projeto>
 - local: npx @nestjs/cli new <nome do projeto>

projeto:
nest new <nome projeto>
------------------------------------------------
Instação das bibliotecas de decorators para validação e tranformação dos dados:
npm i class-validator class-transformer

documentação: https://github.com/typestack/class-validator#validation-decorators
acrescentar no bootstrap:
app.useGlobalPipes(new ValidationPipe());
-----------------------------------------------
Instação da biblioteca para Partial type (usada no patch)
npm i @nestjs/swagger
importação do type:
npm i @nestjs/mapped-types

------------------------------
forma de tranformar o id do request
@Param('id', ParseIntPipe) id: number

-----------------------------
Instação prisma:
npm i -D prisma

instalar o prima no projeto(bd novo):
npx prisma

puxar o bd:
npx prisma db pull;

criar api js
npx prisma generate (rodar sempre que mudar os dados da tabela)

criar o .env e a pasta prisma
prisma init

puxar os dados do bd para criar uma classe
npx prisma db pull

criar Prisma Client livrary
npx prisma generate
-------------------------------------
instalar o jwt
npm i @nestjs/jwt

--------------------------------------------------
ORM(Object Relational Mapping):
 - padrão Representa as tabelas ou coleções de bd com classe o obj.
 - cada tabela é representada por uma classes.
 - cada registro é uma instancia da classe.
 - querys são métodos;
 - Melhor para manter o padrão e auxilia na manutenção.


--------------------------------------
EXEMPLO DE CRIAÇÃO DE CRUD BÁSICO:
import { Body, Controller, Get, Param, Post, Put, Patch, Delete,} from '@nestjs/common';

@Controller('users')
export class UserController {
  @Post()
  async create(@Body() body) {
    return { body };
  }

  @Get()
  async read() {
    return { users: [] };
  }

  @Get(':id')
  async list(@Param() param) {
    return { user: {}, param };
  }

  @Put(':id')
  async update(@Body() body, @Param() params) {
    return {
      method: 'put',
      body,
      params,
    };
  }

  @Patch(':id')
  async updatePartial(@Body() body, @Param() params) {
    return {
      method: 'patch',
      body,
      params,
    };
  }

  @Delete(':id')
  async delete(@Param() params) {
    return {
      params,
    };
  }
}
FIM DO EXEMPLO DE CRIAÇÃO DE CRUD BÁSICO
------------------------------
